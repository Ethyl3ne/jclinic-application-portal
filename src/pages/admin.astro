---
import { getSession, isAdmin } from '../lib/auth';
import { getApplicationStatus } from '../lib/application-status';

const session = await getSession(Astro);

if (!session) {
  return Astro.redirect('/');
}

const db = Astro.locals.runtime?.env.DB;
if (!db) {
  return new Response('Database not available', { status: 500 });
}

// Check if user is admin
const userIsAdmin = await isAdmin(session.user.email, db);
if (!userIsAdmin) {
  return new Response('Unauthorized', { status: 403 });
}

// Get application status
const applicationsOpen = await getApplicationStatus(db);

// Get submitted applications with user data (ONLY submitted, no drafts)
const applications = await db.prepare(`
  SELECT 
    a.id,
    a.essay_one,
    a.essay_two,
    a.experience_data,
    a.needs_financial_aid,
    a.submitted_at,
    a.is_draft,
    u.name,
    u.email,
    u.first_name,
    u.last_name,
    u.preferred_email
  FROM applications a
  JOIN users u ON a.user_id = u.id
  WHERE a.is_draft = 0
  ORDER BY a.submitted_at DESC
`).all();

import Layout from '../layouts/Layout.astro';
---

<Layout title="Admin Dashboard - Application Portal" session={session}>
	<main class="main-content">
		<div class="admin-section">
			<div class="container">
			<!-- Application Status Control -->
			<div style="background: white; border-radius: 5px; padding: 1rem; margin-bottom: 1.2rem; border: 1px solid #e5e7eb;">
				<div style="display: flex; justify-content: space-between; align-items: center;">
					<div>
						<h3 style="margin: 0; font-size: 1.125rem; font-weight: 600; color: #111827;">Application Status</h3>
						<p style="margin: 0.5rem 0 0 0; color: #6b7280; font-size: 0.875rem;">
							Control whether new applications can be submitted
						</p>
					</div>
					<div style="display: flex; align-items: center; gap: 1rem;">
						<span style={`font-weight: 600; ${applicationsOpen ? 'color: #059669;' : 'color: #dc2626;'}`}>
							{applicationsOpen ? 'üü¢ Open' : 'üî¥ Closed'}
						</span>
						<button 
							id="toggle-applications-btn" 
							class="btn"
							style={`${applicationsOpen 
								? 'background: linear-gradient(135deg, #dc2626 0%, #b91c1c 100%);' 
								: 'background: linear-gradient(135deg, #059669 0%, #047857 100%);'
							} color: white;`}
						>
							{applicationsOpen ? 'üî¥ Close Applications' : 'üü¢ Open Applications'}
						</button>
					</div>
				</div>
			</div>

			<div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 1rem;">
				<h2>Applications ({applications.results?.length || 0})</h2>
				<div style="display: flex; gap: 1rem;">
					<a href="/api/export-csv" class="btn btn-secondary">
						Export to CSV
					</a>
					<button id="wipe-database-btn" class="btn" style="background: linear-gradient(135deg, var(--error-color) 0%, #b91c1c 100%); color: white;">
						‚ö†Ô∏è Wipe Database
					</button>
				</div>
			</div>

			{applications.results && applications.results.length > 0 ? (
				<div class="space-y-1">
					{applications.results.map((app: any) => {
						return (
							<div 
								class="card hover:shadow-lg transition-shadow cursor-pointer border-l-4 border-blue-500"
								onclick={`window.location.href='/admin/application/${app.id}'`}
							>
								<div class="flex justify-between items-center">
									<div class="flex-1">
										<h3 class="text-lg font-semibold text-gray-900 mb-0.5">
											{app.first_name} {app.last_name}
										</h3>
										<p class="text-gray-600 text-sm mb-0.5">
											{app.preferred_email || app.email}
										</p>
										{app.needs_financial_aid && (
											<span class="inline-block bg-orange-100 text-orange-800 text-xs px-2 py-0.5 rounded-full">
												Financial Aid Requested
											</span>
										)}
									</div>
									<div class="text-right">
										<p class="text-sm font-medium text-gray-900">Application #{app.id}</p>
										<p class="text-sm text-gray-500">
											{new Date(app.submitted_at).toLocaleDateString()}
										</p>
										<p class="text-xs text-blue-600 mt-0.5">Click to view details ‚Üí</p>
									</div>
								</div>
							</div>
						);
					})}
				</div>
			) : (
				<div class="text-center py-12">
					<div class="card">
						<p style="color: var(--gray-500); font-size: 1.125rem;">No applications submitted yet.</p>
					</div>
				</div>
			)}
		</div>

		<script>
			document.addEventListener('DOMContentLoaded', function() {
				// Handle application toggle
				const toggleBtn = document.getElementById('toggle-applications-btn') as HTMLButtonElement;
				if (toggleBtn) {
					toggleBtn.addEventListener('click', async function() {
						const isCurrentlyOpen = this.textContent.includes('Close');
						const newState = !isCurrentlyOpen;
						
						const originalText = this.textContent;
						this.disabled = true;
						this.textContent = 'üîÑ Updating...';

						try {
							const formData = new FormData();
							formData.append('isOpen', newState.toString());

							const response = await fetch('/api/admin/toggle-applications', {
								method: 'POST',
								body: formData
							});

							const result = await response.json();

							if (response.ok) {
								// Update button text and style
								this.textContent = newState ? 'üî¥ Close Applications' : 'üü¢ Open Applications';
								this.style.background = newState 
									? 'linear-gradient(135deg, #dc2626 0%, #b91c1c 100%)' 
									: 'linear-gradient(135deg, #059669 0%, #047857 100%)';
								
								// Update status indicator
								const statusIndicator = this.parentElement?.previousElementSibling?.querySelector('span');
								if (statusIndicator) {
									statusIndicator.textContent = newState ? 'üü¢ Open' : 'üî¥ Closed';
									statusIndicator.style.color = newState ? '#059669' : '#dc2626';
								}
								
								alert(`‚úÖ ${result.message}`);
							} else {
								alert(`‚ùå Error: ${result.error}`);
								this.textContent = originalText;
							}
						} catch (error) {
							alert('‚ùå Error updating application status. Please try again.');
							this.textContent = originalText;
						} finally {
							this.disabled = false;
						}
					});
				}

				const wipeBtn = document.getElementById('wipe-database-btn') as HTMLButtonElement;
				if (wipeBtn) {
					wipeBtn.addEventListener('click', async function() {
						// First confirmation
						if (!confirm('‚ö†Ô∏è WARNING: This will permanently delete ALL applications and user data!\n\nThis action cannot be undone. Are you absolutely sure?')) {
							return;
						}

						// Second confirmation with typing requirement
						const confirmText = prompt('To confirm, type exactly: WIPE_ALL_DATA');
						if (confirmText !== 'WIPE_ALL_DATA') {
							alert('Database wipe cancelled - confirmation text did not match.');
							return;
						}

						// Third confirmation
						if (!confirm('FINAL WARNING: You are about to delete ALL data in the database.\n\nThis includes:\n- All applications (drafts and submitted)\n- All user accounts (except admins)\n\nThis cannot be undone. Proceed?')) {
							return;
						}

						const originalText = this.textContent;
						this.disabled = true;
						this.textContent = 'üîÑ Wiping...';

						try {
							const formData = new FormData();
							formData.append('confirmationCode', 'WIPE_ALL_DATA');

							const response = await fetch('/api/admin/wipe-database', {
								method: 'POST',
								body: formData
							});

							const result = await response.json();

							if (response.ok) {
								alert(`‚úÖ Database wiped successfully!\n\nDeleted:\n- ${result.deleted.applications} applications\n- ${result.deleted.users} users`);
								location.reload();
							} else {
								alert(`‚ùå Error: ${result.error}`);
							}
						} catch (error) {
							alert('‚ùå Error wiping database. Please try again.');
						} finally {
							this.disabled = false;
							this.textContent = originalText;
						}
					});
				}
			});
		</script>
	</main>
</Layout>